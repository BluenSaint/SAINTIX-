name: 🔥 CodeRabbit Enterprise Review System

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main, master, develop, staging]
  push:
    branches: [main, master, develop, staging]
  workflow_dispatch:
    inputs:
      audit_type:
        description: 'Type of audit to run'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - security
        - performance
        - accessibility
        - report-only

env:
  CODERABBIT_TOKEN: ${{ secrets.CODERABBIT_TOKEN }}
  NODE_VERSION: '20'

jobs:
  # 🛡️ Security and Quality Gate
  security-gate:
    name: 🛡️ Security & Quality Gate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 🔍 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: 📦 Install Dependencies
        run: |
          npm install -g pnpm
          pnpm install --frozen-lockfile
          
      - name: 🔍 Run Security Audit
        run: |
          pnpm audit --audit-level=moderate
          
      - name: 🧪 Run Tests
        run: |
          pnpm test --coverage
          
      - name: 🏗️ Build Check
        run: |
          pnpm build
          
      - name: 📊 Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          
  # 🤖 CodeRabbit AI Review
  coderabbit-review:
    name: 🤖 CodeRabbit AI Review
    runs-on: ubuntu-latest
    needs: security-gate
    if: always() && (github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: 🔍 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🤖 CodeRabbit Review
        uses: coderabbitai/coderabbit-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          coderabbit_token: ${{ secrets.CODERABBIT_TOKEN }}
          review_level: 'comprehensive'
          auto_review: true
          
      - name: 📋 Generate Review Summary
        run: |
          echo "## 🤖 CodeRabbit AI Review Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Review Level**: Comprehensive Enterprise-Grade" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Check**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Accessibility Audit**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality**: ✅ Analyzed" >> $GITHUB_STEP_SUMMARY
          
  # 🔍 Comprehensive Audit (Manual Trigger)
  comprehensive-audit:
    name: 🔍 Comprehensive Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 🔍 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🔧 Setup Environment
        run: |
          chmod +x ./coderabbit_automation.sh
          
      - name: 🚀 Run Comprehensive Audit
        run: |
          case "${{ github.event.inputs.audit_type }}" in
            "full")
              ./coderabbit_automation.sh --full-audit
              ;;
            "security")
              ./coderabbit_automation.sh --security-scan
              ;;
            "performance")
              ./coderabbit_automation.sh --performance-audit
              ;;
            "accessibility")
              ./coderabbit_automation.sh --accessibility-audit
              ;;
            "report-only")
              ./coderabbit_automation.sh --report
              ;;
          esac
          
      - name: 📊 Upload Audit Results
        uses: actions/upload-artifact@v4
        with:
          name: coderabbit-audit-results
          path: |
            *.json
            *.md
            *.log
          retention-days: 30
          
      - name: 📋 Create Issue for Critical Findings
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Critical Issues Found in CodeRabbit Audit',
              body: `
              ## 🚨 Critical Issues Detected
              
              The CodeRabbit comprehensive audit has detected critical issues that require immediate attention.
              
              **Audit Type**: ${{ github.event.inputs.audit_type }}
              **Triggered By**: @${{ github.actor }}
              **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
              
              Please review the audit results and address the critical findings before proceeding.
              
              ---
              *Auto-generated by CodeRabbit Enterprise Review System*
              `,
              labels: ['critical', 'coderabbit', 'audit']
            })
            
  # 📈 Performance Monitoring
  performance-monitor:
    name: 📈 Performance Monitor
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'main')
    
    steps:
      - name: 🔍 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: 📦 Install Dependencies
        run: |
          npm install -g pnpm
          pnpm install --frozen-lockfile
          
      - name: 🏗️ Build for Performance Analysis
        run: |
          pnpm build
          
      - name: 📊 Bundle Size Analysis
        run: |
          npx bundlesize
          
      - name: ⚡ Lighthouse Performance Audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
          
  # 🔄 Auto-fix and Suggestions
  auto-fix:
    name: 🔄 Auto-fix & Suggestions
    runs-on: ubuntu-latest
    needs: coderabbit-review
    if: github.event_name == 'pull_request' && !github.event.pull_request.draft
    
    steps:
      - name: 🔍 Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: 📦 Install Dependencies
        run: |
          npm install -g pnpm
          pnpm install --frozen-lockfile
          
      - name: 🔧 Auto-fix Issues
        run: |
          # Run ESLint with auto-fix
          pnpm lint --fix
          
          # Run Prettier formatting
          pnpm format
          
          # Fix TypeScript issues where possible
          pnpm type-check --fix
          
      - name: 📝 Commit Auto-fixes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "CodeRabbit Auto-fix"
          
          if [[ -n $(git status --porcelain) ]]; then
            git add .
            git commit -m "🤖 Auto-fix: CodeRabbit suggestions applied
            
            - ESLint auto-fixes applied
            - Code formatting standardized
            - TypeScript issues resolved
            
            Co-authored-by: CodeRabbit AI <coderabbit@ai.com>"
            git push
          else
            echo "No auto-fixes needed"
          fi
          
  # 📊 Reporting and Metrics
  reporting:
    name: 📊 Generate Reports
    runs-on: ubuntu-latest
    needs: [security-gate, coderabbit-review]
    if: always() && github.event_name == 'pull_request'
    
    steps:
      - name: 🔍 Checkout Code
        uses: actions/checkout@v4
        
      - name: 📊 Generate Quality Report
        run: |
          echo "# 📊 Code Quality Report" > quality_report.md
          echo "" >> quality_report.md
          echo "**PR**: #${{ github.event.number }}" >> quality_report.md
          echo "**Author**: @${{ github.event.pull_request.user.login }}" >> quality_report.md
          echo "**Branch**: ${{ github.head_ref }}" >> quality_report.md
          echo "" >> quality_report.md
          echo "## 🎯 Quality Metrics" >> quality_report.md
          echo "- **Security Gate**: ${{ needs.security-gate.result }}" >> quality_report.md
          echo "- **CodeRabbit Review**: ${{ needs.coderabbit-review.result }}" >> quality_report.md
          echo "" >> quality_report.md
          echo "## 🔍 Review Summary" >> quality_report.md
          echo "All enterprise-grade quality checks have been completed." >> quality_report.md
          
      - name: 💬 Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('quality_report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

# 🔧 Workflow Configuration
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

