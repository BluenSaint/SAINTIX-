# üî• ENTERPRISE-GRADE CODERABBIT CONFIGURATION
# Zero-tolerance policy for code quality issues
# Comprehensive AI-powered code review for SAINTRIX

# Global Configuration
language: en-US
reviews:
  # Enable maximum scrutiny
  request_changes_workflow: true
  dismissal_restrictions: true
  require_code_owner_reviews: true
  required_approving_review_count: 2
  
  # Comprehensive review scope
  auto_review:
    enabled: true
    drafts: true
    base_branches: ["main", "master", "develop", "staging"]
    
  # Enterprise-grade review depth
  review_depth: "comprehensive"
  review_style: "enterprise"
  
  # AI Review Configuration
  ai_review:
    enabled: true
    model: "advanced"
    confidence_threshold: 0.8
    
# Path-based Instructions for Targeted Reviews
path_instructions:
  # Frontend Components - UI/UX Focus
  - path: "app/**/*.tsx"
    instructions: |
      üéØ FRONTEND COMPONENT REVIEW:
      - Verify accessibility compliance (WCAG 2.1 AA)
      - Check for proper TypeScript typing
      - Validate responsive design patterns
      - Ensure proper error boundaries
      - Review performance optimizations
      - Check for unused props/imports
      - Validate component composition patterns
      - Ensure proper state management
      
  - path: "components/**/*.tsx"
    instructions: |
      üîß COMPONENT ARCHITECTURE REVIEW:
      - Verify reusability and modularity
      - Check prop validation and defaults
      - Review component lifecycle management
      - Ensure proper memoization where needed
      - Validate accessibility attributes
      - Check for performance anti-patterns
      
  # API Routes - Security & Performance Focus
  - path: "app/api/**/*.ts"
    instructions: |
      üõ°Ô∏è API SECURITY & PERFORMANCE REVIEW:
      - Validate input sanitization and validation
      - Check authentication and authorization
      - Review rate limiting implementation
      - Ensure proper error handling
      - Validate database query optimization
      - Check for SQL injection vulnerabilities
      - Review API response structure
      - Ensure proper logging and monitoring
      
  # Database & Backend Logic
  - path: "lib/**/*.ts"
    instructions: |
      ‚ö° BACKEND LOGIC REVIEW:
      - Validate database connection handling
      - Check for proper error propagation
      - Review caching strategies
      - Ensure proper type safety
      - Validate business logic correctness
      - Check for memory leaks
      - Review async/await patterns
      
  # Configuration Files
  - path: "*.config.*"
    instructions: |
      ‚öôÔ∏è CONFIGURATION REVIEW:
      - Validate security configurations
      - Check for exposed secrets
      - Review build optimization settings
      - Ensure proper environment handling
      - Validate dependency versions
      
  # Styling and Assets
  - path: "**/*.css"
    instructions: |
      üé® STYLING REVIEW:
      - Check for unused CSS rules
      - Validate responsive design
      - Review accessibility color contrast
      - Ensure consistent design system usage
      - Check for performance optimizations
      
# Review Focus Areas
focus_areas:
  security:
    enabled: true
    severity: "high"
    rules:
      - "no-hardcoded-secrets"
      - "validate-input-sanitization"
      - "check-authentication-flows"
      - "review-cors-configuration"
      - "validate-environment-variables"
      
  performance:
    enabled: true
    severity: "high"
    rules:
      - "check-bundle-size"
      - "validate-lazy-loading"
      - "review-database-queries"
      - "check-memory-usage"
      - "validate-caching-strategies"
      
  accessibility:
    enabled: true
    severity: "high"
    rules:
      - "validate-aria-attributes"
      - "check-color-contrast"
      - "ensure-keyboard-navigation"
      - "validate-semantic-html"
      - "check-screen-reader-support"
      
  maintainability:
    enabled: true
    severity: "medium"
    rules:
      - "check-code-duplication"
      - "validate-naming-conventions"
      - "review-function-complexity"
      - "check-documentation"
      - "validate-test-coverage"

# Code Quality Standards
quality_standards:
  # TypeScript/JavaScript Standards
  typescript:
    strict_mode: true
    no_any_types: true
    explicit_return_types: true
    no_unused_variables: true
    
  # React/Next.js Standards
  react:
    hooks_rules: "strict"
    prop_types: "required"
    jsx_a11y: "strict"
    
  # General Code Standards
  general:
    max_function_length: 50
    max_file_length: 300
    cyclomatic_complexity: 10
    cognitive_complexity: 15

# Automated Fixes
auto_fix:
  enabled: true
  safe_fixes_only: true
  categories:
    - "formatting"
    - "imports"
    - "unused_variables"
    - "type_annotations"
    - "accessibility_attributes"

# Review Triggers
triggers:
  # Automatic triggers
  on_push: true
  on_pull_request: true
  on_draft: true
  
  # Manual triggers
  commands:
    - "@coderabbitai review"
    - "@coderabbitai security-scan"
    - "@coderabbitai performance-check"
    - "@coderabbitai accessibility-audit"
    - "@coderabbitai full-audit"

# Integration Settings
integrations:
  github:
    auto_merge: false
    require_review_approval: true
    block_on_security_issues: true
    
  notifications:
    slack: false
    email: true
    
# Custom Rules for SAINTRIX
custom_rules:
  # Credit Repair Specific Rules
  - name: "validate-credit-data-handling"
    pattern: "credit|score|report|dispute"
    severity: "critical"
    message: "Credit data handling requires extra security validation"
    
  - name: "check-pii-protection"
    pattern: "ssn|social|personal|identity"
    severity: "critical"
    message: "PII data must be properly encrypted and protected"
    
  - name: "validate-financial-calculations"
    pattern: "calculate|payment|amount|balance"
    severity: "high"
    message: "Financial calculations require precision validation"

# Reporting Configuration
reporting:
  format: "detailed"
  include_suggestions: true
  include_examples: true
  include_links: true
  
  # Report sections
  sections:
    - "security_issues"
    - "performance_issues"
    - "accessibility_issues"
    - "code_quality"
    - "best_practices"
    - "architecture_suggestions"

# Learning and Adaptation
learning:
  enabled: true
  feedback_integration: true
  team_preferences: true
  
# Advanced Features
advanced:
  # AI-powered suggestions
  ai_suggestions: true
  
  # Code pattern recognition
  pattern_recognition: true
  
  # Architectural analysis
  architecture_analysis: true
  
  # Dependency analysis
  dependency_analysis: true
  
  # Security vulnerability scanning
  vulnerability_scanning: true

